{"version":3,"sources":["redux/contacts/contacts-types.js","redux/contacts/contacts-actions.js","components/ContactForm.js","components/ContactItem.js","components/ContactList.js","components/Filter.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["name","number","type","types","payload","id","shortId","generate","contactId","value","ContactForm","state","handeChange","e","currentTarget","setState","handleSubmit","preventDefault","props","onSubmit","reset","this","className","onChange","pattern","title","required","Component","connect","dispatch","contactActions","ContactItem","onDelete","onClick","getVisibleContacts","allItems","filter","normalizedFilter","toLowerCase","contact","includes","contacts","items","map","target","App","initialItems","combineReducers","rootReducer","contactsReducer","store","createStore","composeWithDevTools","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d34a6183.chunk.js","sourcesContent":["export default {\r\n  ADD: 'contacts/add',\r\n  DELETE: 'contacts/delete',\r\n  CHANGE_FILTER: 'contacts/changeFilter',\r\n};\r\n","import shortId from 'shortid';\r\nimport types from './contacts-types';\r\n\r\nconst addContact = ({ name, number }) => ({\r\n  type: types.ADD,\r\n  payload: {\r\n    id: shortId.generate(),\r\n    name,\r\n    number,\r\n  },\r\n});\r\n\r\nconst deleteContact = contactId => ({\r\n  type: types.DELETE,\r\n  payload: contactId,\r\n});\r\n\r\nconst changeFilter = value => ({\r\n  type: types.CHANGE_FILTER,\r\n  payload: value,\r\n});\r\n\r\nexport default { addContact, deleteContact, changeFilter };\r\n","import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport contactActions from '../redux/contacts/contacts-actions';\nimport PropTypes from 'prop-types';\nimport capitalizeFirstLetter from \"../redux/contacts/helpers\"\n\nclass ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  handeChange = e => {\n    const { name, value } = e.currentTarget;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.onSubmit(this.state); // App formSubmitHandler\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label className=\"label\">\n          Name\n          <input\n            className=\"input\"\n            type=\"text\"\n            value={this.state.name}\n            onChange={this.handeChange}\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n        </label>\n        <label className=\"label\">\n          Phone\n          <input\n            className=\"input\"\n            type=\"tel\"\n            value={this.state.number}\n            onChange={this.handeChange}\n            name=\"number\"\n            required\n          />\n        </label>\n        <button className=\"button\" type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: ({ name, number }) =>\n    dispatch(contactActions.addContact({ name, number })),\n});\n\nexport default connect(null, mapDispatchToProps)(ContactForm);\n","import PropTypes from 'prop-types';\n\nconst ContactItem = ({ id, name, number, onDelete }) => (\n  <li className=\"contact-list-item\">\n    <p className=\"name bold\">{name}</p>\n    <p>{number}</p>\n    <button className=\"button\" onClick={() => onDelete(id)}>\n      Delete\n    </button>\n  </li>\n);\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n\nexport default ContactItem;\n","import PropTypes from 'prop-types';\nimport ContactItem from './ContactItem';\nimport { connect } from 'react-redux';\nimport contactActions from '../redux/contacts/contacts-actions';\n\nconst ContactList = ({ contacts, onDelete }) => (\n  <ul className=\"contact-list\">\n    {contacts.map(({ id, name, number }) => (\n      <ContactItem\n        key={id}\n        id={id}\n        name={name}\n        number={number}\n        onDelete={onDelete}\n      />\n    ))}\n  </ul>\n);\n\nContactList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n\nconst getVisibleContacts = (allItems, filter) => {\n  const normalizedFilter = filter.toLowerCase();\n  return allItems.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter),\n  );\n};\n\nconst mapStateToProps = ({contacts: {items, filter}}) => ({\n contacts: getVisibleContacts(items, filter),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDelete: contactId => dispatch(contactActions.deleteContact(contactId)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport contactActions from '../redux/contacts/contacts-actions';\n\nconst Filter = ({ value, onChange }) => (\n  <label className=\"label\">\n    Find contacts by name\n    <input\n      className=\"input\"\n      type=\"text\"\n      value={value}\n      onChange={onChange}\n    ></input>\n  </label>\n);\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  value: state.contacts.filter,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: e => dispatch(contactActions.changeFilter(e.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","// Components\nimport ContactForm from './components/ContactForm';\nimport ContactList from './components/ContactList';\nimport Filter from './components/Filter';\n\nconst App = () => {\n  return (\n    <div className=\"phonebook\">\n      <h1 className=\"phonebook_title\">Phonebook</h1>\n      <ContactForm />\n      <h2 className=\"phonebook_title\">Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n\nexport default App;\n","import { combineReducers } from 'redux';\r\nimport types from './contacts-types';\r\n\r\nconst initialItems = [\r\n  { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n  { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n  { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n  { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n];\r\n\r\nconst items = (state = initialItems, { type, payload }) => {\r\n  switch (type) {\r\n    case types.ADD:\r\n      return [...state, payload];\r\n\r\n    case types.DELETE:\r\n      return state.filter(({ id }) => id !== payload);\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst filter = (state = '', { type, payload }) => {\r\n  switch (type) {\r\n    case types.CHANGE_FILTER:\r\n      return payload;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport contactsReducer from './contacts/contacts-reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  contacts: contactsReducer,\r\n});\r\n\r\nconst store = createStore(rootReducer, composeWithDevTools());\r\n\r\nexport default store;\r\n","import 'modern-normalize/modern-normalize.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './styles/style.scss';\n\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}